const { EmbedBuilder, Colors, inlineCode } = require("discord.js");
const CommandBuilder = require("../Structures/CommandBuilder");

module.exports = {
  data: new CommandBuilder()
    .setName("healp")
    .setDescription("Gets a List Of Available Commands")
    .addStringOption((option) =>
      option.setName("command").setDescription("Command-Specific Help")
    )
    .addStringOption((option) =>
      option
        .setName("category")
        .setDescription("Category-Specific Command List")
    )
    .setCategory("Miscellaneous")
    .setType("BOTH"),
  /**
   *
   * @param {import("discord.js").Interaction} interaction
   * @param {Array} args
   */
  async execute(interaction, args) {
    let categoryString = interaction.content
      ? args[2]
      : interaction.options.getString("category");
    let commandString = interaction.content
      ? args[2]
      : interaction.options.getString("command");
    let helpEmbed = new EmbedBuilder()
      .setTitle(`${interaction.client.user.displayName}'s List Of Commands`)
      .setColor(Colors.Aqua);
    let command = interaction.client.Commands.get(commandString)
      ? interaction.client.Commands.get(commandString)
      : false;
    commandString
      ? helpEmbed.setTitle(`Command-Specific Help - ${commandString}`)
      : helpEmbed.setTitle(
          `${interaction.client.user.displayName}'s List Of Commands`
        );
    command
      ? helpEmbed.setColor(Colors.Green).addFields({
          name: `${command.data.name}`,
          value: `${command.data.description}`,
        })
      : commandString
      ? helpEmbed.setColor(Colors.Red).addFields({
          name: `Command Not Found!`,
          value: `${inlineCode(
            commandString
          )} is not a valid command! ${inlineCode(
            `${interaction.client.textCommandsPrefix}help`
          )} or /help for a list of available commands`,
        })
      : "";
    let commandsWithDescription = "";
    command && commandString
      ? command.data.options.length > 0
        ? command.data.options.forEach((option) =>
            helpEmbed.addFields({
              name: `${command.data.name + " " + inlineCode(option.name)}`,
              value: `${option.description}`,
            })
          )
        : ""
      : interaction.client.CommandCategories.forEach((category) => {
          let i = -1;
          i < category.length ? i++ : (i = i + 0);
          console.log(category.length, i);
          let test = `${category[i].data.name}: ${category[i].data.description}\n`;
          i < category.length
            ? (commandsWithDescription += test)
            : i >= category.length ? helpEmbed.addFields({
                name: `${category[i].data.category}`,
                value: `${commandsWithDescription}`,
              }) : "";
        });
    await interaction.reply({ embeds: [helpEmbed] });
  },
};
